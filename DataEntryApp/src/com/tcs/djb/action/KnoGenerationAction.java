/************************************************************************************************************
 * @(#) KnoGenerationAction.java   10 FEB 2016
 * 
 *
 *************************************************************************************************************/
package com.tcs.djb.action;

import java.io.InputStream;
import java.io.StringBufferInputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;
import org.apache.struts2.interceptor.ServletResponseAware;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.tcs.djb.constants.DJBConstants;
import com.tcs.djb.dao.FileNbrAllocationDAO;
import com.tcs.djb.dao.KnoGenerationDAO;
import com.tcs.djb.model.KnoGenerationDetails;
import com.tcs.djb.services.KnoAndBillGenerationService;
import com.tcs.djb.util.AppLog;
import com.tcs.djb.util.UtilityForAll;
import com.tcs.djb.validator.ScreenAccessValidator;

/**
 * <p>
 * This class contains all the action performed on New Connection KNO and Bill
 * Generation Screen as per JTrac DJB-4313
 * </p>
 * 
 * @author Rajib Hazarika(Tata Consultancy Services)
 * @since 10-FEB-2016
 * @history Sanjay on 17-03-2016 edited to add plot area as per jTrac DJB-4418
 * @history: On 31-MAR-2016 Rajib Hazarika (682667) modified lines as per JTrac
 *           DJB-4429 for enabling of purpose of Application field
 * @history: On 28th-AUG-2016 LOVELY (986018) added functionalities of online
 *           consumer kno generation as per JTrac DJB-4541 ,Open project-1443.
 * 
 */

public class KnoGenerationAction extends ActionSupport implements
		ServletResponseAware {
	private static final String SCREEN_ID = "44";
	private static final long serialVersionUID = -2961753266773964519L;
	/**
	 * variable to Store Applicant's acctId.
	 */
	String acctId;
	/**
	 * variable to Store Applicant's Address.
	 */
	private String address;
	/**
	 * variable to Store Applicable Additional Charges/pending Charges .
	 */
	private String addtionalCharge;
	/**
	 * variable to Store Applicable Civil Construction Charges.
	 */
	private String applCivilConstChrg;
	/* Start : Edited by Sanjay Kumar Das (1033846) as per JTrac DJB-4408 */
	/**
	 * variable to Store ARN Generated by.
	 */
	private String arnGenBy;
	/**
	 * variable to Store ARN No.
	 */
	private String arnNo;

	/**
	 * variable to Store Bank Name.
	 */
	private String bankBranch;

	/**
	 * variable to Store Bank MICR No..
	 */
	private String bankMicr;

	/**
	 * variable to Store Bank Name.
	 */
	private String bankName;

	/**
	 * variable to Store Applicant's BillId.
	 */
	String billId;
	/**
	 * variable to Store Applicant's Name.
	 */
	private String consumerName;

	/**
	 * variable to Store Development Charge Colony for Sewer.
	 */
	private String devChrgColonySew;

	/**
	 * variable to Store Development Charge Colony for Water.
	 */
	private String devChrgColonyWat;

	/**
	 * variable to Store Development Charge Colony for Water and Sewer.
	 */
	private String devChrgColonyWatSew;

	/**
	 * variable to Store Notification date for Sewer Development Charges.
	 */
	private String devChrgNotifyDtSewer;

	/**
	 * variable to Store Development Charge Notification Date for Water.
	 */
	private String devChrgNotifyDtWat;

	/*
	 * variable to store List map values for DJB Employee Rebate Applicable
	 */
	Map<String, String> djbEmpCharValListMap;
	/**
	 * variable to Store DJb Employee Rebate Applicable or not.
	 */
	private String djbEmpRbtAppl;
	/**
	 * variable to Store Customer date of Application.
	 */
	private String dtOfAppl;

	/**
	 * variable to Store DJb Employee Retirement Date.
	 */
	private String dtOfRet;

	/**
	 * variable to Store DJb Employee ID.
	 */
	private String empId;

	/**
	 * variable to Store File No.
	 */
	private String fileNo;

	/**
	 * variable to Store hidAction for AJax use.
	 */
	private String hidAction;

	private InputStream inputStream;
	/**
	 * variable to Store is Documents verified by User.
	 */
	private String isDocVerified;
	/*
	 * variable to store List map values for If all the documents facilitated by
	 * user are verified
	 */
	Map<String, String> isDocVerifiedCharValListMap;
	/**
	 * variable to Store Is Occupier Security .
	 */
	private String isOccupierSecurity;
	/**
	 * variable to Store Unauthorized usage detected at premise.
	 */
	private String isUnAuthorisedUsage;

	/**
	 * variable to Store Is water being used in civil construction for the
	 * premises.
	 */
	private String isWatUsedForPrem;

	/**
	 * variable to Store length of road to be cut for Sewer.
	 */
	private String lengthOfRoadForSewer;

	/**
	 * variable to Store length of road to be cut for water.
	 */
	private String lengthOfRoadForWater;

	/**
	 * variable to Store Applicant's Phone No.
	 */
	private String mobNo;

	/**
	 * variable to Store Unique MR key value .
	 */
	private String mrkey;

	/* End : Edited by Sanjay Kumar Das (1033846) as per JTrac DJB-4408 */
	/**
	 * variable to Store meter security charge .
	 */
	private String mtrSecurityCharge;

	/**
	 * variable to Store Applicable no. of yrs for which unauthorized usage
	 * penalty is charged .
	 */
	private String noOfYrForUnauthPenlaty;

	/*
	 * variable to store List map values for Is Occupier Security Applicable
	 */
	Map<String, String> occupSecurityCharValListMap;

	private ArrayList<String> payementTypeListMap = new ArrayList<String>();
	/**
	 * variable to Store Applicant's person Id.
	 */
	String perId;
	/* Start : Edited by Sanjay Kumar Das (1033846) as per JTrac DJB-4408 */
	/**
	 * variable to Store Plot Area value .
	 */

	private String plotArea;

	/* Start : Edited by Sanjay Kumar Das (1033846) as per JTrac DJB-4408 */
	/**
	 * variable to Store old Plot Area value .
	 */
	private String plotAreaOld;

	/**
	 * variable to Store Preferred mode of payment.
	 */
	private String prefModeOfPayment;

	/*
	 * variable to store List map values for Preferred mode of payment
	 */
	Map<String, String> prefModeOfPmntCharValListMap;

	/**
	 * variable to Store Type of Application.
	 */
	private String purposeOfAppl;

	/**
	 * variable to Store Application purpose Changed Flag.
	 */
	private String purposeOfApplChngFlag;

	/**
	 * variable to Store Old Type of Application Value.
	 */
	private String purposeOfApplOld;

	/**
	 * variable to Store Applicable Road Restoration Charges for Sewer .
	 */
	private String roadRestChrgForSewer;

	/**
	 * variable to Store Applicable Road Restoration Charges for Water .
	 */
	private String roadRestChrgForWater;
	/**
	 * variable to Store Sewer Development Charge Applicability.
	 */
	private String sewDevChrgAppl;

	/*
	 * variable to store List map values for Sewer Development Charge
	 * Applicability
	 */
	Map<String, String> sewDevChrgApplCharValListMap;

	/*
	 * variable to store List map values for Development Charge Colony for Sewer
	 */
	Map<String, String> sewDevChrgColCharValListMap;

	/*
	 * variable to store List map values for Sewer Technical Feasibility
	 */
	Map<String, String> sewFeasCharValListMap;

	/**
	 * variable to Store Sewerage Technical Feasibility.
	 */
	private String sewTechFeasibility;

	/**
	 * variable to Store Size of meter.
	 */
	private String sizeOfMtr;

	/**
	 * variable to Store Trade security charge .
	 */
	private String tradeSecurityCharge;

	/*
	 * variable to store List map values for Identity proof Type
	 */
	private Map<String, String> typeOfAppListMap;

	/**
	 * variable to Store Applicable unauthorized Usage Penalty based on
	 * estimated consumption.
	 */
	private String unauthPenlatyAmt;

	/*
	 * variable to store List map values for Unauthorized usage detected at
	 * premise
	 */
	Map<String, String> unAuthUsgCharValListMap;

	/**
	 * variable to Store Water Development Charge Applicability.
	 */
	private String watDevChrgAppl;

	/*
	 * variable to store List map values for Water Development Charge
	 * Applicability
	 */
	Map<String, String> watDevChrgApplCharValListMap;

	/*
	 * variable to store List map values for ZRO Location
	 */
	Map<String, String> watDevChrgColCharValListMap;

	/*
	 * variable to store List map values for Water Technical Feasibility
	 */
	Map<String, String> watFeasCharValListMap;
	/**
	 * variable to Store Water Technical Feasibility.
	 */
	private String watTechFeasibility;
	/*
	 * variable to store List map values for Size of Meter
	 */
	Map<String, String> wconSizeCharValListMap;
	/*
	 * variable to store List map values for Is water being used in civil
	 * construction for the premises
	 */
	Map<String, String> yesNoCharValListMap;
	/**
	 * variable to Store Zro Location.
	 */
	private String zroCd;
	/*
	 * variable to store List map values for Identity proof Type
	 */
	Map<String, String> zroLocCharValListMap;

	/**
	 * @return
	 */
	// Start:Added by Madhuri (735689) as per JTrac DJB-4541 ,Open project-1443
	/*
	 * variable to store zro location for online consumer
	 */
	private String zroLocForTagFileNo;

	// END:Added by Madhuri (735689) as per JTrac DJB-4541 ,Open project-1443
	/**
	 * <p>
	 * For all ajax call in New Connection KNO and Bill Generation Screen
	 * </p>
	 * 
	 * @return String
	 */
	@SuppressWarnings("deprecation")
	public String ajaxMethod() {
		AppLog.begin();
		try {
			Map<String, Object> session = ActionContext.getContext()
					.getSession();
			String userIdSession = (String) session.get("userId");
			AppLog.info("userIdSession>>" + userIdSession);

			if (null == userIdSession || "".equals(userIdSession)) {
				addActionError(getText("error.login.expired"));
				inputStream = new StringBufferInputStream("ERROR:"
						+ getText("error.login.expired")
						+ ", Please re login  and try Again!");
				AppLog.end();
				return "login";
			}
			if ("getArnDetails".equalsIgnoreCase(hidAction)) {
				if ((null == arnNo || "".equalsIgnoreCase(arnNo))
						&& (null == fileNo || "".equalsIgnoreCase(fileNo))) {
					AppLog.info(">>ARN No/ FileNo is Null>>");
					inputStream = new StringBufferInputStream(
							"ERROR:Missing Mandatory Details");
					AppLog.end();
					return SUCCESS;
				}
				// Retrieve ARN Details by Calling DAO Class
				String errMsg = "";
				if (null != arnNo && !"".equalsIgnoreCase(arnNo)) {
					errMsg = "Invalid ARN";
				} else {
					errMsg = "Invalid File No.";
				}
				KnoGenerationDetails knoGenerationDetails = new KnoGenerationDetails();
				knoGenerationDetails = new KnoGenerationDAO().getArnDetails(
						arnNo, fileNo);
				if (null != knoGenerationDetails) {
					if (null != knoGenerationDetails.getOnlineStatus()
							&& "N".equals(knoGenerationDetails
									.getOnlineStatus().trim())) {
						boolean mandatoryFieldMissing = false;
						boolean notInStgTable = false;
						/*
						 * Start : Edited by Sanjay Kumar Das (1033846) as per
						 * JTrac DJB-4408
						 */
						if (null == knoGenerationDetails.getPlotArea()
								|| "".equalsIgnoreCase(knoGenerationDetails
										.getPlotArea())) {
							mandatoryFieldMissing = true;
						}
						/*
						 * End : Edited by Sanjay Kumar Das (1033846) as per
						 * JTrac DJB-4408
						 */
						if (null == knoGenerationDetails.getConsumerName()
								|| "".equalsIgnoreCase(knoGenerationDetails
										.getConsumerName())) {
							mandatoryFieldMissing = true;
						}
						if (null == knoGenerationDetails.getArnNo()
								|| "".equalsIgnoreCase(knoGenerationDetails
										.getArnNo())) {
							mandatoryFieldMissing = true;
						}
						if (null == knoGenerationDetails.getMobNo()
								|| "".equalsIgnoreCase(knoGenerationDetails
										.getMobNo())) {
							mandatoryFieldMissing = true;
						}
						if (null == knoGenerationDetails.getAddress()
								|| "".equalsIgnoreCase(knoGenerationDetails
										.getAddress())) {
							mandatoryFieldMissing = true;
						}
						if (null == knoGenerationDetails.getPurposeOfAppl()
								|| "".equalsIgnoreCase(knoGenerationDetails
										.getPurposeOfAppl())) {
							mandatoryFieldMissing = true;
						}
						if (null == knoGenerationDetails.getZroCd()
								|| "".equalsIgnoreCase(knoGenerationDetails
										.getZroCd())) {
							knoGenerationDetails.setZroCd("");
						}
						if (null == knoGenerationDetails.getDtOfAppl()
								|| "".equalsIgnoreCase(knoGenerationDetails
										.getDtOfAppl())) {
							mandatoryFieldMissing = true;
						}
						if (null == knoGenerationDetails.getFileNo()
								|| "".equalsIgnoreCase(knoGenerationDetails
										.getFileNo())) {
							mandatoryFieldMissing = true;
						}
						if (null == knoGenerationDetails.getStatusCd()
								|| "".equalsIgnoreCase(knoGenerationDetails
										.getStatusCd())) {
							mandatoryFieldMissing = true;
							notInStgTable = true;
						}
						if (notInStgTable) {
							AppLog
									.info(">> Couldn't found ARN Details in Staging Table >>");
							inputStream = new StringBufferInputStream("ERROR: "
									+ errMsg);
							AppLog.end();
							return SUCCESS;
						}
						// if (!DJBConstants.STATUS_CD_KNO_BILL_GENERATION
						// .equalsIgnoreCase(knoGenerationDetails
						// .getStatusCd())) {
						// AppLog
						// .info(">> File Number associated to the specified ARN is not yet received for KNO/Bill generation >>");
						// inputStream = new StringBufferInputStream(
						// "ERROR: File Number associated to the specified ARN is not yet received for KNO/Bill generation ");
						// AppLog.end();
						// return SUCCESS;
						// }
						if (mandatoryFieldMissing) {
							AppLog
									.info(">> Couldn't found ARN's Mandatory Details in DB >>");
							inputStream = new StringBufferInputStream(
									"ERROR: ARN/File No. don't have Mandatory  Field values, Please contact System Administrator!");
							AppLog.end();
							return SUCCESS;
						}
					}
					StringBuffer sbResult = new StringBuffer();
					sbResult.append(knoGenerationDetails.getConsumerName()
							.trim()
							+ "|"
							+ knoGenerationDetails.getMobNo().trim()
							+ "|"
							+ knoGenerationDetails.getAddress().trim()
							+ "|"
							+ knoGenerationDetails.getPurposeOfAppl().trim()
							+ "|"
							+ knoGenerationDetails.getDtOfAppl().trim()
							+ "|");
					// Start : commented by Lovely (986018) as per JTrac
					// DJB-4541
					/*
					 * + "|" + knoGenerationDetails.getZroCd().trim() + "|" +
					 * knoGenerationDetails.getFileNo().trim() + "|"
					 */
					// Start : commented by Lovely (986018) as per JTrac
					// DJB-4541
					// End : Edited by Lovely (986018) as per JTrac DJB-4541
					if (null != knoGenerationDetails.getOnlineStatus()
							&& "N".equals(knoGenerationDetails
									.getOnlineStatus().trim())) {
						sbResult.append(knoGenerationDetails.getZroCd().trim()
								+ "|" + knoGenerationDetails.getFileNo().trim()
								+ "|");
					} else {
						sbResult.append("" + "|" + "" + "|");
					}
					/*
					 * End : Edited by Lovely (986018) as per JTrac DJB-4541
					 */
					sbResult.append(knoGenerationDetails.getArnNo().trim()
							+ "|" + knoGenerationDetails.getStatusCd().trim()
							+ "|");

					if (null != knoGenerationDetails.getAcctId()
							&& !"".equalsIgnoreCase(knoGenerationDetails
									.getAcctId().trim())) {
						sbResult
								.append(knoGenerationDetails.getAcctId().trim());
					}
					sbResult.append("|");
					if (null != knoGenerationDetails.getAcctGenBy()
							&& !"".equalsIgnoreCase(knoGenerationDetails
									.getAcctGenBy().trim())) {
						sbResult.append(knoGenerationDetails.getAcctGenBy()
								.trim());
					}
					sbResult.append("|");
					if (null != knoGenerationDetails.getBillId()
							&& !"".equalsIgnoreCase(knoGenerationDetails
									.getBillId().trim())) {
						sbResult
								.append(knoGenerationDetails.getBillId().trim());
					}
					sbResult.append("|");
					if (null != knoGenerationDetails.getBillId()
							&& !"".equalsIgnoreCase(knoGenerationDetails
									.getBillId().trim())) {
						sbResult.append(UtilityForAll
								.generateToken(knoGenerationDetails.getBillId()
										.trim()));
					}
					sbResult.append("|");
					if (null != knoGenerationDetails.getBillGenBy()
							&& !"".equalsIgnoreCase(knoGenerationDetails
									.getBillGenBy().trim())) {
						sbResult.append(knoGenerationDetails.getBillGenBy()
								.trim());
					}
					sbResult.append("|");
					if (null != knoGenerationDetails.getIsWatUsedForPrem()
							&& !"".equalsIgnoreCase(knoGenerationDetails
									.getIsWatUsedForPrem().trim())) {
						sbResult.append(knoGenerationDetails
								.getIsWatUsedForPrem().trim());
					}

					sbResult.append("|");
					if (null != knoGenerationDetails.getIsUnAuthorisedUsage()
							&& !"".equalsIgnoreCase(knoGenerationDetails
									.getIsUnAuthorisedUsage().trim())) {
						sbResult.append(knoGenerationDetails
								.getIsUnAuthorisedUsage().trim());
					}
					sbResult.append("|");
					if (null != knoGenerationDetails.getPrefModeOfPayment()
							&& !"".equalsIgnoreCase(knoGenerationDetails
									.getPrefModeOfPayment().trim())) {
						sbResult.append(knoGenerationDetails
								.getPrefModeOfPayment().trim());
					}
					sbResult.append("|");
					if (null != knoGenerationDetails.getDjbEmpRbtAppl()
							&& !"".equalsIgnoreCase(knoGenerationDetails
									.getDjbEmpRbtAppl().trim())) {
						sbResult.append(knoGenerationDetails.getDjbEmpRbtAppl()
								.trim());
					}
					sbResult.append("|");
					if (null != knoGenerationDetails.getEmpId()
							&& !"".equalsIgnoreCase(knoGenerationDetails
									.getEmpId().trim())) {
						sbResult.append(knoGenerationDetails.getEmpId().trim());
					}
					sbResult.append("|");
					if (null != knoGenerationDetails.getDtOfRet()
							&& !"".equalsIgnoreCase(knoGenerationDetails
									.getDtOfRet().trim())) {
						sbResult.append(knoGenerationDetails.getDtOfRet()
								.trim());
					}
					sbResult.append("|");
					if (null != knoGenerationDetails.getPerId()
							&& !"".equalsIgnoreCase(knoGenerationDetails
									.getPerId().trim())) {
						sbResult.append(knoGenerationDetails.getPerId().trim());
					}
					/*
					 * Start : Edited by Sanjay Kumar Das (1033846) as per JTrac
					 * DJB-4408
					 */
					sbResult.append("|");
					if (null != knoGenerationDetails.getPlotArea()
							&& !"".equalsIgnoreCase(knoGenerationDetails
									.getPlotArea().trim())) {
						sbResult.append(knoGenerationDetails.getPlotArea()
								.trim());
					}
					/*
					 * End : Edited by Sanjay Kumar Das (1033846) as per JTrac
					 * DJB-4408
					 */

					/*
					 * Start : Edited by Lovely (986018) as per JTrac DJB-4541
					 * ,Open project-1443
					 */
					sbResult.append("|");
					if (null != knoGenerationDetails.getOnlineStatus()
							&& !"".equalsIgnoreCase(knoGenerationDetails
									.getOnlineStatus().trim())) {
						sbResult.append(knoGenerationDetails.getOnlineStatus()
								.trim());
					}
					/*
					 * End : Edited by Lovely (986018)as per JTrac DJB-4541
					 * ,Open project-1443
					 */
					inputStream = new StringBufferInputStream(sbResult
							.toString());
					AppLog.info(sbResult.toString());
					AppLog.end();
					return SUCCESS;
				} else {
					AppLog
							.info(">> Invalid ARN /File No, Couldn't fetch ARN details from DB >>");
					inputStream = new StringBufferInputStream(
							"ERROR: Invalid ARN /File No.");
					AppLog.end();
					return SUCCESS;
				}
			}
			// Generate KNO and Bill through CCB Service Call
			if ("generateAcct".equalsIgnoreCase(hidAction)) {
				boolean mandatoryFieldMissing = false;
				if ((null == arnNo || "".equalsIgnoreCase(arnNo))
						&& (null == fileNo || "".equalsIgnoreCase(fileNo))) {
					AppLog.info(">>ARN No/ FileNo is Null>>");
					inputStream = new StringBufferInputStream(
							"ERROR:Missing Mandatory Details");
					AppLog.end();
					return SUCCESS;
				}
				if (null == purposeOfAppl || "".equalsIgnoreCase(purposeOfAppl)) {
					mandatoryFieldMissing = true;
				}
				if (null == isUnAuthorisedUsage
						|| "".equalsIgnoreCase(isUnAuthorisedUsage)) {
					mandatoryFieldMissing = true;
				}
				if (null == prefModeOfPayment
						|| "".equalsIgnoreCase(prefModeOfPayment)) {
					mandatoryFieldMissing = true;
				}
				if (null == watTechFeasibility
						|| "".equalsIgnoreCase(watTechFeasibility)) {
					mandatoryFieldMissing = true;
				}
				if (null == sewTechFeasibility
						|| "".equalsIgnoreCase(sewTechFeasibility)) {
					mandatoryFieldMissing = true;
				}
				if (null == isDocVerified || "".equalsIgnoreCase(isDocVerified)) {
					mandatoryFieldMissing = true;
				}
				if (null == djbEmpRbtAppl || "".equalsIgnoreCase(djbEmpRbtAppl)) {
					mandatoryFieldMissing = true;
				}
				if (null == sizeOfMtr || "".equalsIgnoreCase(sizeOfMtr)) {
					mandatoryFieldMissing = true;
				}

				if (null == isOccupierSecurity
						|| "".equalsIgnoreCase(isOccupierSecurity)) {
					mandatoryFieldMissing = true;
				}

				if (null == mrkey || "".equalsIgnoreCase(mrkey)) {
					mandatoryFieldMissing = true;
				}
				if (null == sewDevChrgAppl
						|| "".equalsIgnoreCase(sewDevChrgAppl)) {
					mandatoryFieldMissing = true;
				}
				if (null == devChrgColonySew
						|| "".equalsIgnoreCase(devChrgColonySew)) {
					mandatoryFieldMissing = true;
				}
				if (null == watDevChrgAppl
						|| "".equalsIgnoreCase(watDevChrgAppl)) {
					mandatoryFieldMissing = true;
				}
				if (null == devChrgColonyWat
						|| "".equalsIgnoreCase(devChrgColonyWat)) {
					mandatoryFieldMissing = true;
				}
				if (null == zroCd || "".equalsIgnoreCase(zroCd)) {
					mandatoryFieldMissing = true;
				}
				/*
				 * Start : Edited by Sanjay Kumar Das (1033846) as per JTrac
				 * DJB-4408
				 */
				if (null == plotArea || "".equalsIgnoreCase(plotArea)) {
					mandatoryFieldMissing = true;
				}
				/*
				 * End : Edited by Sanjay Kumar Das (1033846) as per JTrac
				 * DJB-4408
				 */
				// START: On 31-MAR-2016 Rajib Hazarika (682667) Modified
				// below method to update purposeOfAppl as per JTrac DJB-4429
				purposeOfApplChngFlag = DJBConstants.FLAG_N;
				if (null != purposeOfApplOld
						&& !purposeOfAppl.equalsIgnoreCase(purposeOfApplOld)) {
					purposeOfApplChngFlag = DJBConstants.FLAG_Y;
				}
				// START: On 31-MAR-2016 Rajib Hazarika (682667) Modified
				// below method to update purposeOfAppl as per JTrac DJB-4429
				if (mandatoryFieldMissing) {
					AppLog.info(">> Couldn't found ARN's Mandatory Details >>");
					inputStream = new StringBufferInputStream(
							"ERROR: Validation Error, Mandatory field missing!");
					AppLog.end();
					return SUCCESS;
				}
				String authCookie = null;
				if (DJBConstants.FLAG_Y
						.equalsIgnoreCase(DJBConstants.FLAG_DYNAMIC_AUTHCOOKIE_FOR_KNO_GEN)) {
					if (null != session.get("CCB_CRED")) {
						authCookie = (String) session.get("CCB_CRED");
					} else {
						addActionError(getText("error.access.denied"));
						inputStream = ScreenAccessValidator
								.ajaxResponse(getText("error.access.denied"));
						AppLog.end();
						return "success";
					}
				}
				// Creating KnoGen Object for CCB Service Calling
				KnoGenerationDetails knoGenerationDetails = new KnoGenerationDetails();
				/*
				 * Start : Edited by Sanjay Kumar Das (1033846) as per JTrac
				 * DJB-4408
				 */
				if (plotArea.equalsIgnoreCase(plotAreaOld)) {
					knoGenerationDetails.setPlotArea("");
				} else {
					knoGenerationDetails.setPlotArea(plotArea);
				}
				/*
				 * End : Edited by Sanjay Kumar Das (1033846) as per JTrac
				 * DJB-4408
				 */
				knoGenerationDetails.setArnNo(arnNo);
				knoGenerationDetails.setConsumerName(consumerName);
				knoGenerationDetails.setMobNo(mobNo);
				knoGenerationDetails.setAddress(address);
				knoGenerationDetails.setPurposeOfAppl(purposeOfAppl);
				knoGenerationDetails.setIsWatUsedForPrem(isWatUsedForPrem);
				knoGenerationDetails.setApplCivilConstChrg(applCivilConstChrg);
				knoGenerationDetails
						.setIsUnAuthorisedUsage(isUnAuthorisedUsage);
				knoGenerationDetails.setPrefModeOfPayment(prefModeOfPayment);
				knoGenerationDetails.setWatTechFeasibility(watTechFeasibility);
				knoGenerationDetails.setSewTechFeasibility(sewTechFeasibility);
				knoGenerationDetails.setIsDocVerified(isDocVerified);
				knoGenerationDetails.setDjbEmpRbtAppl(djbEmpRbtAppl);
				knoGenerationDetails.setEmpId(empId);
				knoGenerationDetails.setDtOfRet(dtOfRet);
				knoGenerationDetails.setSizeOfMtr(sizeOfMtr);
				knoGenerationDetails
						.setLengthOfRoadForWater(lengthOfRoadForWater);
				knoGenerationDetails
						.setLengthOfRoadForSewer(lengthOfRoadForSewer);
				knoGenerationDetails
						.setRoadRestChrgForSewer(roadRestChrgForSewer);
				knoGenerationDetails
						.setRoadRestChrgForWater(roadRestChrgForWater);
				knoGenerationDetails.setAddtionalCharge(addtionalCharge);
				knoGenerationDetails
						.setNoOfYrForUnauthPenlaty(noOfYrForUnauthPenlaty);
				knoGenerationDetails.setUnauthPenlatyAmt(unauthPenlatyAmt);
				knoGenerationDetails.setIsOccupierSecurity(isOccupierSecurity);
				knoGenerationDetails.setMtrSecurityCharge(mtrSecurityCharge);
				knoGenerationDetails
						.setTradeSecurityCharge(tradeSecurityCharge);
				knoGenerationDetails.setMrkey(mrkey);
				knoGenerationDetails.setDtOfAppl(dtOfAppl);
				knoGenerationDetails.setSewDevChrgAppl(sewDevChrgAppl);
				knoGenerationDetails.setDevChrgColonySew(devChrgColonySew);
				knoGenerationDetails.setWatDevChrgAppl(watDevChrgAppl);
				knoGenerationDetails.setDevChrgColonyWat(devChrgColonyWat);
				knoGenerationDetails.setZroCd(zroCd);
				knoGenerationDetails
						.setNotToBeUsed(DJBConstants.FIELD_NOT_TO_BE_USED_VAL);
				knoGenerationDetails
						.setDevChrgNotifyDtWat(DJBConstants.WAT_DEV_CHRG_COL_NOTIFYDT_NA);
				knoGenerationDetails
						.setDevChrgNotifyDtSewer(DJBConstants.SEW_DEV_CHRG_COL_NOTIFYDT_NA);
				knoGenerationDetails
						.setCustColony(DJBConstants.CUST_COL_FOR_DEV_CHRG_NOT_USED);
				knoGenerationDetails
						.setToDoField(DJBConstants.TO_DO_FOR_NEW_CON_FORM);
				knoGenerationDetails.setPerId(perId);
				// START: On 31-MAR-2016 Rajib Hazarika (682667) Modified
				// below method to update purposeOfAppl as per JTrac DJB-4429
				knoGenerationDetails
						.setPurposeOfApplChngFlag(purposeOfApplChngFlag);
				// END: On 31-MAR-2016 Rajib Hazarika (682667) Modified
				// below method to update purposeOfAppl as per JTrac DJB-4429
				AppLog.info(">>FIELD_NOT_TO_BE_USED_VAL>>"
						+ DJBConstants.FIELD_NOT_TO_BE_USED_VAL
						+ ">>WAT_DEV_CHRG_COL_NOTIFYDT_NA>>"
						+ DJBConstants.WAT_DEV_CHRG_COL_NOTIFYDT_NA
						+ ">>SEW_DEV_CHRG_COL_NOTIFYDT_NA>>"
						+ DJBConstants.SEW_DEV_CHRG_COL_NOTIFYDT_NA
						+ ">>perId>>" + perId);

				acctId = KnoAndBillGenerationService.generateKno(acctId,
						authCookie, knoGenerationDetails);
				if (null != acctId
						&& !"".equalsIgnoreCase(acctId)
						&& !DJBConstants.FALSE_KNO_VALUE
								.equalsIgnoreCase(acctId)) {
					boolean rowsUpdtd = false;
					/*
					 * Start : Edited by Sanjay Kumar Das (1033846) as per JTrac
					 * DJB-4408
					 */
					// START: On 31-MAR-2016 Rajib Hazarika (682667) Modified
					// below method to update purposeOfAppl as per JTrac
					// DJB-4429
					if (null != purposeOfApplOld
							&& !"".equalsIgnoreCase(purposeOfApplOld)) {
						purposeOfApplOld = purposeOfApplOld.trim();
					}
					rowsUpdtd = KnoGenerationDAO.updateGeneratedKno(
							DJBConstants.STATUS_CD_FOR_NEW_CON_ACCT_GEN,
							acctId, userIdSession, fileNo, arnNo, plotArea,
							plotAreaOld, purposeOfAppl, purposeOfApplOld);
					// END: On 31-MAR-2016 Rajib Hazarika (682667) Modified
					// below method to update purposeOfAppl as per JTrac
					// DJB-4429
					/*
					 * End : Edited by Sanjay Kumar Das (1033846) as per JTrac
					 * DJB-4408
					 */
					if (rowsUpdtd) {
						inputStream = new StringBufferInputStream("KNO: ["
								+ acctId + "] has been generated Successfully");
					} else {
						inputStream = new StringBufferInputStream(
								"KNO: ["
										+ acctId
										+ "] has been generated Successfully, but couln't be updated in Staging table");
					}
					AppLog.end();
					return SUCCESS;
				} else {
					inputStream = new StringBufferInputStream(
							"ERROR: Unable to generate KNO for ARN:" + arnNo);
					AppLog.end();
					return SUCCESS;
				}
			}
			if ("generateBill".equalsIgnoreCase(hidAction)) {
				if (null == acctId && "".equalsIgnoreCase(acctId)) {
					AppLog
							.info(">> Mandatory Field Validation Error, AcctId is null >>");
					inputStream = new StringBufferInputStream(
							"ERROR: Validation Error, AcctId is missing!");
					AppLog.end();
					return SUCCESS;
				}
				String authCookie = null;
				if (DJBConstants.FLAG_Y
						.equalsIgnoreCase(DJBConstants.FLAG_DYNAMIC_AUTHCOOKIE_FOR_BILL_GEN)) {
					if (null != session.get("CCB_CRED")) {
						authCookie = (String) session.get("CCB_CRED");
					} else {
						addActionError(getText("error.access.denied"));
						inputStream = ScreenAccessValidator
								.ajaxResponse(getText("error.access.denied"));
						AppLog.end();
						return "success";
					}
				}
				// Call CC&B Service for new Connection Bill Generation
				billId = KnoAndBillGenerationService.generateNewConnBill(
						acctId, authCookie);
				if (null != billId && !"".equalsIgnoreCase(billId)) {
					AppLog.info(">>billId>>" + billId);
					// Update Details in Staging Table
					boolean rowsUpdtd = false;
					rowsUpdtd = KnoGenerationDAO.updateGeneratedBill(
							DJBConstants.STATUS_CD_FOR_NEW_CON_BILL_GEN,
							billId, userIdSession, acctId);
					AppLog.info(">>rowsUpdtd>>" + rowsUpdtd);
					if (rowsUpdtd) {
						inputStream = new StringBufferInputStream(
								" Bill Generated Succsesfully, BillId:["
										+ billId + "]");
						AppLog.info(">>inputStream>>"
								+ " Bill Generated Succsesfully, BillId:["
								+ billId + "]");
					} else {
						inputStream = new StringBufferInputStream(
								" Bill Generated Succsesfully, BillId:["
										+ billId
										+ "], but couldn't be updated in Staging table");
						AppLog
								.info(">>inputStream>>"
										+ " Bill Generated Succsesfully, BillId:["
										+ billId
										+ "], but couldn't be updated in Staging table");
					}
					AppLog.end();
					return SUCCESS;
				} else {
					inputStream = new StringBufferInputStream(
							"ERROR: Bill couldn't be generated");
					AppLog.end();
					return SUCCESS;
				}
			}
			if ("validateMrkey".equalsIgnoreCase(hidAction)) {
				if ((null == mrkey && "".equalsIgnoreCase(mrkey))
						&& (null == zroCd && "".equalsIgnoreCase(zroCd))) {
					AppLog
							.info(">> Mandatory Field Validation Error, MrKey or ZRO cd  is null >>");
					inputStream = new StringBufferInputStream(
							"ERROR: Validation Error, MrKey or ZRO cd is missing!");
					AppLog.end();
					return SUCCESS;

				}
				int mrKeyCnt = 0;
				// Call DAO method to get count of the mrkey whether the mrkey
				// is belongs to specified ZRO location or not
				mrKeyCnt = KnoGenerationDAO.getMrkeyCount(mrkey, zroCd);
				if (mrKeyCnt > 0) {
					inputStream = new StringBufferInputStream("SUCCESS");
					AppLog.end();
					return SUCCESS;
				} else {
					inputStream = new StringBufferInputStream("ERROR: Mrkey "
							+ mrkey
							+ " doesn't belongs to the specified ZRO Location");
					AppLog.end();
					return SUCCESS;
				}
			}
			// Start : Added by Madhuri (735689) as per JTrac DJB-4541 ,Open
			// project-1443
			if ("tagFile".equalsIgnoreCase(hidAction)) {
				AppLog.info("fileNo>>" + fileNo);
				String zroLocForTagFileNo = KnoGenerationDAO
						.fetchZroLocationTagFile(fileNo);
				AppLog.info("zroLocForTagFileNo>>" + zroLocForTagFileNo);
				if (null != zroLocForTagFileNo
						&& zroLocForTagFileNo.trim().length() > 0) {
					inputStream = new StringBufferInputStream("ZROCD:"
							+ zroLocForTagFileNo);
					AppLog.end();
					return SUCCESS;
				} else {
					inputStream = new StringBufferInputStream(
							"ERROR:No ZRO Location Exists for this File No.");
					AppLog.end();
					return SUCCESS;
				}
			}
			// End :Added by Madhuri (735689) as per JTrac DJB-4541 ,Open
			// project-1443
			// Start : Added by Lovely (986018) as per JTrac DJB-4541 ,Open
			// project-1443
			if ("tagInsertDetails".equalsIgnoreCase(hidAction)) {
				String[] purposeOfApp = purposeOfAppl.split(",");
				KnoGenerationDetails knoGenerationDetails = new KnoGenerationDetails();
				knoGenerationDetails.setFileNo(fileNo);
				knoGenerationDetails.setPurposeOfAppl(purposeOfApp[0]);
				knoGenerationDetails.setConsumerName(consumerName);
				knoGenerationDetails.setMobNo(mobNo);
				knoGenerationDetails.setAddress(address);
				knoGenerationDetails.setArnNo(arnNo);
				knoGenerationDetails.setStatusCd(DJBConstants.STATUS_CD);
				knoGenerationDetails.setZroCd(zroCd);
				AppLog.info("<<<<zrocode>>>>>>>>" + zroCd);
				knoGenerationDetails.setPlotArea(plotArea);
				knoGenerationDetails.setOnlineStatus(DJBConstants.FLAG_Y);
				int rowInserted = KnoGenerationDAO.tagFileInsertDetails(
						knoGenerationDetails, userIdSession);
				if (rowInserted > 0) {
					inputStream = new StringBufferInputStream("File Number "
							+ fileNo + " has been tagged to ARN " + arnNo);
				} else {
					inputStream = new StringBufferInputStream(
							"ERROR:File Number already exists.");
				}
			}
			// End: Added by Lovely (986018) as per JTrac DJB-4541 ,Open
			// project-1443
		} catch (Exception e) {
			inputStream = new StringBufferInputStream(
					"ERROR: There was some Problem on Processing of last Operation: ");
			AppLog.error(e);
		}
		AppLog.end();
		return SUCCESS;
	}

	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ActionSupport#execute()
	 */
	@SuppressWarnings("unchecked")
	public String execute() {
		AppLog.info("hidAction" + hidAction);
		AppLog.begin();
		String result = "error";
		try {
			// System.out.println("hidAction::" + hidAction);
			Map<String, Object> session = ActionContext.getContext()
					.getSession();
			String userName = (String) session.get("userId");
			if (null == userName || "".equals(userName)) {

				addActionError(getText("error.login.expired"));
				AppLog.end();
				return "login";
			}
			if (!ScreenAccessValidator.validate(session, SCREEN_ID)) {
				addActionError(getText("error.access.denied"));
				AppLog.end();
				return "login";
			}
			typeOfAppListMap = (HashMap<String, String>) session
					.get("typeOfAppListMap");
			List<String> typeOfAppValues = Arrays
					.asList(DJBConstants.NEW_CONN_TYPE_OF_APP_VALUES
							.split("\\s*,\\s*"));
			if (null == typeOfAppListMap || typeOfAppListMap.isEmpty()) {
				typeOfAppListMap = new LinkedHashMap<String, String>();
				for (String str : typeOfAppValues) {
					typeOfAppListMap.put(str.substring(0, str.indexOf(':')),
							str.substring(str.indexOf(':') + 1));
					AppLog.info(">>str>" + str.substring(str.indexOf(':') + 1)
							+ ">>str.substring(0)>>"
							+ str.substring(0, str.indexOf(':')));
				}
				session.put("typeOfAppListMap", typeOfAppListMap);
			}

		} catch (Exception e) {

			addActionError("There was a problem while Processing your Request. Please Try Again.");
			AppLog.error(e);
		}
		AppLog.end();
		return result;
	}

	/**
	 * @return the acctId
	 */
	public String getAcctId() {
		return acctId;
	}

	/**
	 * @return the address
	 */
	public String getAddress() {
		return address;
	}

	/**
	 * @return the addtionalCharge
	 */
	public String getAddtionalCharge() {
		return addtionalCharge;
	}

	/**
	 * @return the applCivilConstChrg
	 */
	public String getApplCivilConstChrg() {
		return applCivilConstChrg;
	}

	/**
	 * @return the arnGenBy
	 */
	public String getArnGenBy() {
		return arnGenBy;
	}

	/**
	 * @return the arnNo
	 */
	public String getArnNo() {
		return arnNo;
	}

	/**
	 * @return the bankBranch
	 */
	public String getBankBranch() {
		return bankBranch;
	}

	/**
	 * @return the bankMicr
	 */
	public String getBankMicr() {
		return bankMicr;
	}

	/**
	 * variable to Store Bank Branch.
	 */

	/**
	 * @return the bankName
	 */
	public String getBankName() {
		return bankName;
	}

	/**
	 * @return the billId
	 */
	public String getBillId() {
		return billId;
	}

	/**
	 * @return the consumerName
	 */
	public String getConsumerName() {
		return consumerName;
	}

	/**
	 * @return the devChrgColonySew
	 */
	public String getDevChrgColonySew() {
		return devChrgColonySew;
	}

	/**
	 * @return the devChrgColonyWat
	 */
	public String getDevChrgColonyWat() {
		return devChrgColonyWat;
	}

	/**
	 * @return the devChrgColonyWatSew
	 */
	public String getDevChrgColonyWatSew() {
		return devChrgColonyWatSew;
	}

	/**
	 * @return the devChrgNotifyDtSewer
	 */
	public String getDevChrgNotifyDtSewer() {
		return devChrgNotifyDtSewer;
	}

	/**
	 * @return the devChrgNotifyDtWat
	 */
	public String getDevChrgNotifyDtWat() {
		return devChrgNotifyDtWat;
	}

	/**
	 * @return the djbEmpCharValListMap
	 */
	public Map<String, String> getDjbEmpCharValListMap() {
		return djbEmpCharValListMap;
	}

	/**
	 * @return the djbEmpRbtAppl
	 */
	public String getDjbEmpRbtAppl() {
		return djbEmpRbtAppl;
	}

	/**
	 * @return the dtOfAppl
	 */
	public String getDtOfAppl() {
		return dtOfAppl;
	}

	/**
	 * @return the dtOfRet
	 */
	public String getDtOfRet() {
		return dtOfRet;
	}

	/**
	 * @return the empId
	 */
	public String getEmpId() {
		return empId;
	}

	/**
	 * @return the fileNo
	 */
	public String getFileNo() {
		return fileNo;
	}

	/**
	 * @return the hidAction
	 */
	public String getHidAction() {
		return hidAction;
	}

	/**
	 * @return the inputStream
	 */
	public InputStream getInputStream() {
		return inputStream;
	}

	/**
	 * @return the isDocVerified
	 */
	public String getIsDocVerified() {
		return isDocVerified;
	}

	/**
	 * @return the isDocVerifiedCharValListMap
	 */
	public Map<String, String> getIsDocVerifiedCharValListMap() {
		return isDocVerifiedCharValListMap;
	}

	/**
	 * @return the isOccupierSecurity
	 */
	public String getIsOccupierSecurity() {
		return isOccupierSecurity;
	}

	/**
	 * @return the isUnAuthorisedUsage
	 */
	public String getIsUnAuthorisedUsage() {
		return isUnAuthorisedUsage;
	}

	/**
	 * @return the isWatUsedForPrem
	 */
	public String getIsWatUsedForPrem() {
		return isWatUsedForPrem;
	}

	/**
	 * @return the lengthOfRoadForSewer
	 */
	public String getLengthOfRoadForSewer() {
		return lengthOfRoadForSewer;
	}

	/**
	 * @return the lengthOfRoadForWater
	 */
	public String getLengthOfRoadForWater() {
		return lengthOfRoadForWater;
	}

	/**
	 * @return the mobNo
	 */
	public String getMobNo() {
		return mobNo;
	}

	/**
	 * @return the mrkey
	 */
	public String getMrkey() {
		return mrkey;
	}

	/**
	 * @return the mtrSecurityCharge
	 */
	public String getMtrSecurityCharge() {
		return mtrSecurityCharge;
	}

	/**
	 * @return the noOfYrForUnauthPenlaty
	 */
	public String getNoOfYrForUnauthPenlaty() {
		return noOfYrForUnauthPenlaty;
	}

	/**
	 * @return the occupSecurityCharValListMap
	 */
	public Map<String, String> getOccupSecurityCharValListMap() {
		return occupSecurityCharValListMap;
	}

	/**
	 * @return the payementTypeListMap
	 */
	public ArrayList<String> getPayementTypeListMap() {
		return payementTypeListMap;
	}

	/**
	 * @return the perId
	 */
	public String getPerId() {
		return perId;
	}

	/* Start : Edited by Sanjay Kumar Das (1033846) as per JTrac DJB-4408 */
	/**
	 * @return the plotArea
	 */
	public String getPlotArea() {
		return plotArea;
	}

	/**
	 * @return the plotAreaOld
	 */
	public String getPlotAreaOld() {
		return plotAreaOld;
	}

	/* End : Edited by Sanjay Kumar Das (1033846) as per JTrac DJB-4408 */
	/**
	 * @return the prefModeOfPayment
	 */
	public String getPrefModeOfPayment() {
		return prefModeOfPayment;
	}

	/**
	 * @return the prefModeOfPmntCharValListMap
	 */
	public Map<String, String> getPrefModeOfPmntCharValListMap() {
		return prefModeOfPmntCharValListMap;
	}

	/**
	 * @return the purposeOfAppl
	 */
	public String getPurposeOfAppl() {
		return purposeOfAppl;
	}

	/**
	 * @return the purposeOfApplChngFlag
	 */
	public String getPurposeOfApplChngFlag() {
		return purposeOfApplChngFlag;
	}

	/**
	 * @return the purposeOfApplOld
	 */
	public String getPurposeOfApplOld() {
		return purposeOfApplOld;
	}

	/**
	 * @return the roadRestChrgForSewer
	 */
	public String getRoadRestChrgForSewer() {
		return roadRestChrgForSewer;
	}

	/**
	 * @return the roadRestChrgForWater
	 */
	public String getRoadRestChrgForWater() {
		return roadRestChrgForWater;
	}

	/**
	 * @return the sewDevChrgAppl
	 */
	public String getSewDevChrgAppl() {
		return sewDevChrgAppl;
	}

	/**
	 * @return the sewDevChrgApplCharValListMap
	 */
	public Map<String, String> getSewDevChrgApplCharValListMap() {
		return sewDevChrgApplCharValListMap;
	}

	/**
	 * @return the sewDevChrgColCharValListMap
	 */
	public Map<String, String> getSewDevChrgColCharValListMap() {
		return sewDevChrgColCharValListMap;
	}

	/**
	 * @return the sewFeasCharValListMap
	 */
	public Map<String, String> getSewFeasCharValListMap() {
		return sewFeasCharValListMap;
	}

	/**
	 * @return the sewTechFeasibility
	 */
	public String getSewTechFeasibility() {
		return sewTechFeasibility;
	}

	/**
	 * @return the sizeOfMtr
	 */
	public String getSizeOfMtr() {
		return sizeOfMtr;
	}

	/**
	 * @return the tradeSecurityCharge
	 */
	public String getTradeSecurityCharge() {
		return tradeSecurityCharge;
	}

	/**
	 * @return the typeOfAppListMap
	 */
	public Map<String, String> getTypeOfAppListMap() {
		return typeOfAppListMap;
	}

	/**
	 * @return the unauthPenlatyAmt
	 */
	public String getUnauthPenlatyAmt() {
		return unauthPenlatyAmt;
	}

	/**
	 * @return the unAuthUsgCharValListMap
	 */
	public Map<String, String> getUnAuthUsgCharValListMap() {
		return unAuthUsgCharValListMap;
	}

	/**
	 * @return the watDevChrgAppl
	 */
	public String getWatDevChrgAppl() {
		return watDevChrgAppl;
	}

	/**
	 * @return the watDevChrgApplCharValListMap
	 */
	public Map<String, String> getWatDevChrgApplCharValListMap() {
		return watDevChrgApplCharValListMap;
	}

	/**
	 * @return the watDevChrgColCharValListMap
	 */
	public Map<String, String> getWatDevChrgColCharValListMap() {
		return watDevChrgColCharValListMap;
	}

	/**
	 * @return the watFeasCharValListMap
	 */
	public Map<String, String> getWatFeasCharValListMap() {
		return watFeasCharValListMap;
	}

	/**
	 * @return the watTechFeasibility
	 */
	public String getWatTechFeasibility() {
		return watTechFeasibility;
	}

	/**
	 * @return the wconSizeCharValListMap
	 */
	public Map<String, String> getWconSizeCharValListMap() {
		return wconSizeCharValListMap;
	}

	/**
	 * @return the yesNoCharValListMap
	 */
	public Map<String, String> getYesNoCharValListMap() {
		return yesNoCharValListMap;
	}

	/**
	 * @return the zroCd
	 */
	public String getZroCd() {
		return zroCd;
	}

	/**
	 * @return the zroLocCharValListMap
	 */
	public Map<String, String> getZroLocCharValListMap() {
		return zroLocCharValListMap;
	}

	/**
	 * @param acctId
	 */
	public void setAcctId(String acctId) {
		this.acctId = acctId;
	}

	/**
	 * @param address
	 */
	public void setAddress(String address) {
		this.address = address;
	}

	/**
	 * @param addtionalCharge
	 */
	public void setAddtionalCharge(String addtionalCharge) {
		this.addtionalCharge = addtionalCharge;
	}

	/**
	 * @param applCivilConstChrg
	 */
	public void setApplCivilConstChrg(String applCivilConstChrg) {
		this.applCivilConstChrg = applCivilConstChrg;
	}

	/**
	 * @param arnGenBy
	 */
	public void setArnGenBy(String arnGenBy) {
		this.arnGenBy = arnGenBy;
	}

	/**
	 * @param arnNo
	 */
	public void setArnNo(String arnNo) {
		this.arnNo = arnNo;
	}

	/**
	 * @param bankBranch
	 */
	public void setBankBranch(String bankBranch) {
		this.bankBranch = bankBranch;
	}

	/**
	 * @param bankMicr
	 */
	public void setBankMicr(String bankMicr) {
		this.bankMicr = bankMicr;
	}

	/**
	 * @param bankName
	 */
	public void setBankName(String bankName) {
		this.bankName = bankName;
	}

	/**
	 * @param billId
	 */
	public void setBillId(String billId) {
		this.billId = billId;
	}

	/**
	 * @param consumerName
	 */
	public void setConsumerName(String consumerName) {
		this.consumerName = consumerName;
	}

	/**
	 * @param devChrgColonySew
	 */
	public void setDevChrgColonySew(String devChrgColonySew) {
		this.devChrgColonySew = devChrgColonySew;
	}

	/**
	 * @param devChrgColonyWat
	 */
	public void setDevChrgColonyWat(String devChrgColonyWat) {
		this.devChrgColonyWat = devChrgColonyWat;
	}

	/**
	 * @param devChrgColonyWatSew
	 */
	public void setDevChrgColonyWatSew(String devChrgColonyWatSew) {
		this.devChrgColonyWatSew = devChrgColonyWatSew;
	}

	/**
	 * @param devChrgNotifyDtSewer
	 */
	public void setDevChrgNotifyDtSewer(String devChrgNotifyDtSewer) {
		this.devChrgNotifyDtSewer = devChrgNotifyDtSewer;
	}

	/**
	 * @param devChrgNotifyDtWat
	 */
	public void setDevChrgNotifyDtWat(String devChrgNotifyDtWat) {
		this.devChrgNotifyDtWat = devChrgNotifyDtWat;
	}

	/**
	 * @param djbEmpCharValListMap
	 */
	public void setDjbEmpCharValListMap(Map<String, String> djbEmpCharValListMap) {
		this.djbEmpCharValListMap = djbEmpCharValListMap;
	}

	/**
	 * @param djbEmpRbtAppl
	 */
	public void setDjbEmpRbtAppl(String djbEmpRbtAppl) {
		this.djbEmpRbtAppl = djbEmpRbtAppl;
	}

	/**
	 * @param dtOfAppl
	 */
	public void setDtOfAppl(String dtOfAppl) {
		this.dtOfAppl = dtOfAppl;
	}

	/**
	 * @param dtOfRet
	 */
	public void setDtOfRet(String dtOfRet) {
		this.dtOfRet = dtOfRet;
	}

	/**
	 * @param empId
	 */
	public void setEmpId(String empId) {
		this.empId = empId;
	}

	/**
	 * @param fileNo
	 */
	public void setFileNo(String fileNo) {
		this.fileNo = fileNo;
	}

	/**
	 * @param hidAction
	 */
	public void setHidAction(String hidAction) {
		this.hidAction = hidAction;
	}

	/**
	 * @param inputStream
	 *            the inputStream to set
	 */
	public void setInputStream(InputStream inputStream) {
		this.inputStream = inputStream;
	}

	/**
	 * @param isDocVerified
	 */
	public void setIsDocVerified(String isDocVerified) {
		this.isDocVerified = isDocVerified;
	}

	/**
	 * @param isDocVerifiedCharValListMap
	 */
	public void setIsDocVerifiedCharValListMap(
			Map<String, String> isDocVerifiedCharValListMap) {
		this.isDocVerifiedCharValListMap = isDocVerifiedCharValListMap;
	}

	/**
	 * @param isOccupierSecurity
	 */
	public void setIsOccupierSecurity(String isOccupierSecurity) {
		this.isOccupierSecurity = isOccupierSecurity;
	}

	/**
	 * @param isUnAuthorisedUsage
	 */
	public void setIsUnAuthorisedUsage(String isUnAuthorisedUsage) {
		this.isUnAuthorisedUsage = isUnAuthorisedUsage;
	}

	/**
	 * @param isWatUsedForPrem
	 */
	public void setIsWatUsedForPrem(String isWatUsedForPrem) {
		this.isWatUsedForPrem = isWatUsedForPrem;
	}

	/**
	 * @param lengthOfRoadForSewer
	 */
	public void setLengthOfRoadForSewer(String lengthOfRoadForSewer) {
		this.lengthOfRoadForSewer = lengthOfRoadForSewer;
	}

	/**
	 * @param lengthOfRoadForWater
	 */
	public void setLengthOfRoadForWater(String lengthOfRoadForWater) {
		this.lengthOfRoadForWater = lengthOfRoadForWater;
	}

	/**
	 * @param mobNo
	 */
	public void setMobNo(String mobNo) {
		this.mobNo = mobNo;
	}

	/**
	 * @param mrkey
	 */
	public void setMrkey(String mrkey) {
		this.mrkey = mrkey;
	}

	/**
	 * @param mtrSecurityCharge
	 */
	public void setMtrSecurityCharge(String mtrSecurityCharge) {
		this.mtrSecurityCharge = mtrSecurityCharge;
	}

	/**
	 * @param noOfYrForUnauthPenlaty
	 */
	public void setNoOfYrForUnauthPenlaty(String noOfYrForUnauthPenlaty) {
		this.noOfYrForUnauthPenlaty = noOfYrForUnauthPenlaty;
	}

	/**
	 * @param occupSecurityCharValListMap
	 */
	public void setOccupSecurityCharValListMap(
			Map<String, String> occupSecurityCharValListMap) {
		this.occupSecurityCharValListMap = occupSecurityCharValListMap;
	}

	/**
	 * @param payementTypeListMap
	 *            the payementTypeListMap to set
	 */
	public void setPayementTypeListMap(ArrayList<String> payementTypeListMap) {
		this.payementTypeListMap = payementTypeListMap;
	}

	/**
	 * @param perId
	 */
	public void setPerId(String perId) {
		this.perId = perId;
	}

	/* Start : Edited by Sanjay Kumar Das (1033846) as per JTrac DJB-4408 */

	/**
	 * @param plotArea
	 */
	public void setPlotArea(String plotArea) {
		this.plotArea = plotArea;
	}

	/**
	 * @param plotAreaOld
	 */
	public void setPlotAreaOld(String plotAreaOld) {
		this.plotAreaOld = plotAreaOld;
	}

	/* End : Edited by Sanjay Kumar Das (1033846) as per JTrac DJB-4408 */

	/**
	 * @param prefModeOfPayment
	 */
	public void setPrefModeOfPayment(String prefModeOfPayment) {
		this.prefModeOfPayment = prefModeOfPayment;
	}

	/**
	 * @param prefModeOfPmntCharValListMap
	 */
	public void setPrefModeOfPmntCharValListMap(
			Map<String, String> prefModeOfPmntCharValListMap) {
		this.prefModeOfPmntCharValListMap = prefModeOfPmntCharValListMap;
	}

	/**
	 * @param purposeOfAppl
	 */
	public void setPurposeOfAppl(String purposeOfAppl) {
		this.purposeOfAppl = purposeOfAppl;
	}

	/**
	 * @param purposeOfApplChngFlag
	 */
	public void setPurposeOfApplChngFlag(String purposeOfApplChngFlag) {
		this.purposeOfApplChngFlag = purposeOfApplChngFlag;
	}

	/**
	 * @param purposeOfApplOld
	 */
	public void setPurposeOfApplOld(String purposeOfApplOld) {
		this.purposeOfApplOld = purposeOfApplOld;
	}

	/**
	 * @param roadRestChrgForSewer
	 */
	public void setRoadRestChrgForSewer(String roadRestChrgForSewer) {
		this.roadRestChrgForSewer = roadRestChrgForSewer;
	}

	/**
	 * @param roadRestChrgForWater
	 */
	public void setRoadRestChrgForWater(String roadRestChrgForWater) {
		this.roadRestChrgForWater = roadRestChrgForWater;
	}

	/* (non-Javadoc)
	 * @see org.apache.struts2.interceptor.ServletResponseAware#setServletResponse(javax.servlet.http.HttpServletResponse)
	 */
	@Override
	public void setServletResponse(HttpServletResponse arg0) {
		// TODO Auto-generated method stub

	}

	/**
	 * @param sewDevChrgAppl
	 */
	public void setSewDevChrgAppl(String sewDevChrgAppl) {
		this.sewDevChrgAppl = sewDevChrgAppl;
	}

	/**
	 * @param sewDevChrgApplCharValListMap
	 */
	public void setSewDevChrgApplCharValListMap(
			Map<String, String> sewDevChrgApplCharValListMap) {
		this.sewDevChrgApplCharValListMap = sewDevChrgApplCharValListMap;
	}

	/**
	 * @param sewDevChrgColCharValListMap
	 */
	public void setSewDevChrgColCharValListMap(
			Map<String, String> sewDevChrgColCharValListMap) {
		this.sewDevChrgColCharValListMap = sewDevChrgColCharValListMap;
	}

	/**
	 * @param sewFeasCharValListMap
	 */
	public void setSewFeasCharValListMap(
			Map<String, String> sewFeasCharValListMap) {
		this.sewFeasCharValListMap = sewFeasCharValListMap;
	}

	/**
	 * @param sewTechFeasibility
	 */
	public void setSewTechFeasibility(String sewTechFeasibility) {
		this.sewTechFeasibility = sewTechFeasibility;
	}

	/**
	 * @param sizeOfMtr
	 */
	public void setSizeOfMtr(String sizeOfMtr) {
		this.sizeOfMtr = sizeOfMtr;
	}

	/**
	 * @param tradeSecurityCharge
	 */
	public void setTradeSecurityCharge(String tradeSecurityCharge) {
		this.tradeSecurityCharge = tradeSecurityCharge;
	}

	/**
	 * @param typeOfAppListMap
	 */
	public void setTypeOfAppListMap(Map<String, String> typeOfAppListMap) {
		this.typeOfAppListMap = typeOfAppListMap;
	}

	/**
	 * @param unauthPenlatyAmt
	 */
	public void setUnauthPenlatyAmt(String unauthPenlatyAmt) {
		this.unauthPenlatyAmt = unauthPenlatyAmt;
	}

	/**
	 * @param unAuthUsgCharValListMap
	 */
	public void setUnAuthUsgCharValListMap(
			Map<String, String> unAuthUsgCharValListMap) {
		this.unAuthUsgCharValListMap = unAuthUsgCharValListMap;
	}

	/**
	 * @param watDevChrgAppl
	 */
	public void setWatDevChrgAppl(String watDevChrgAppl) {
		this.watDevChrgAppl = watDevChrgAppl;
	}

	/**
	 * @param watDevChrgApplCharValListMap
	 */
	public void setWatDevChrgApplCharValListMap(
			Map<String, String> watDevChrgApplCharValListMap) {
		this.watDevChrgApplCharValListMap = watDevChrgApplCharValListMap;
	}

	/**
	 * @param watDevChrgColCharValListMap
	 */
	public void setWatDevChrgColCharValListMap(
			Map<String, String> watDevChrgColCharValListMap) {
		this.watDevChrgColCharValListMap = watDevChrgColCharValListMap;
	}

	/**
	 * @param watFeasCharValListMap
	 */
	public void setWatFeasCharValListMap(
			Map<String, String> watFeasCharValListMap) {
		this.watFeasCharValListMap = watFeasCharValListMap;
	}

	/**
	 * @param watTechFeasibility
	 */
	public void setWatTechFeasibility(String watTechFeasibility) {
		this.watTechFeasibility = watTechFeasibility;
	}

	/**
	 * @param wconSizeCharValListMap
	 */
	public void setWconSizeCharValListMap(
			Map<String, String> wconSizeCharValListMap) {
		this.wconSizeCharValListMap = wconSizeCharValListMap;
	}

	/**
	 * @param yesNoCharValListMap
	 */
	public void setYesNoCharValListMap(Map<String, String> yesNoCharValListMap) {
		this.yesNoCharValListMap = yesNoCharValListMap;
	}

	/**
	 * @param zroCd
	 */
	public void setZroCd(String zroCd) {
		this.zroCd = zroCd;
	}

	/**
	 * @param zroLocCharValListMap
	 */
	public void setZroLocCharValListMap(Map<String, String> zroLocCharValListMap) {
		this.zroLocCharValListMap = zroLocCharValListMap;
	}

	// start:Added by Madhuri (735689) as per JTrac DJB-4541 ,Open project-1443
	/**
	 * @return the zroLocForTagFileNo
	 */
	public String getZroLocForTagFileNo() {
		return zroLocForTagFileNo;
	}

	/**
	 * @param zroLocForTagFileNo
	 */
	public void setZroLocForTagFileNo(String zroLocForTagFileNo) {
		this.zroLocForTagFileNo = zroLocForTagFileNo;
	}
	// start:Added by Madhuri (735689) as per JTrac DJB-4541 ,Open project-1443
}
